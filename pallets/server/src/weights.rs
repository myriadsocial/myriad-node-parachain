
//! Autogenerated weights for pallet_server
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-14
//! STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Irmans-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/myriad
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet-server
// --extrinsic=*
// --steps=50
// --repeat=20
// --heap-pages=4096
// --template=./.maintain/pallet-weight-template.hbs
// --output=./pallets/server/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_server.
pub trait WeightInfo {
	fn register(s: u32, ) -> Weight;
	fn update_server(s: u32, ) -> Weight;
	fn unregister() -> Weight;
	fn cancel_unregister() -> Weight;
	fn on_initialize_server() -> Weight;
}

/// Weights for pallet_server using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Server ServerByApiUrl (r:1 w:1)
	/// Proof Skipped: Server ServerByApiUrl (max_values: None, max_size: None, mode: Measured)
	/// Storage: Server ServerCount (r:1 w:1)
	/// Proof Skipped: Server ServerCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Server ServerIndex (r:1 w:1)
	/// Proof Skipped: Server ServerIndex (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Server ServerById (r:0 w:1)
	/// Proof Skipped: Server ServerById (max_values: None, max_size: None, mode: Measured)
	/// Storage: Server ServerByOwner (r:0 w:1)
	/// Proof Skipped: Server ServerByOwner (max_values: None, max_size: None, mode: Measured)
	/// The range of component `s` is `[1, 100]`.
	fn register(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `80`
		//  Estimated: `10428`
		// Minimum execution time: 159_000 nanoseconds.
		Weight::from_parts(192_799_534, 10428)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Server ServerById (r:1 w:1)
	/// Proof Skipped: Server ServerById (max_values: None, max_size: None, mode: Measured)
	/// Storage: Server ServerByOwner (r:2 w:2)
	/// Proof Skipped: Server ServerByOwner (max_values: None, max_size: None, mode: Measured)
	/// Storage: Server ServerByApiUrl (r:2 w:2)
	/// Proof Skipped: Server ServerByApiUrl (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 2]`.
	fn update_server(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `415`
		//  Estimated: `10826 + s * (3716 ±0)`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(114_297_237, 10826)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 3716).saturating_mul(s.into()))
	}
	/// Storage: Server ServerById (r:1 w:1)
	/// Proof Skipped: Server ServerById (max_values: None, max_size: None, mode: Measured)
	/// Storage: Server Tasks (r:1 w:1)
	/// Proof Skipped: Server Tasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Server ServerByOwner (r:0 w:1)
	/// Proof Skipped: Server ServerByOwner (max_values: None, max_size: None, mode: Measured)
	fn unregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `313`
		//  Estimated: `7869`
		// Minimum execution time: 70_000 nanoseconds.
		Weight::from_parts(74_000_000, 7869)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Server ServerById (r:1 w:1)
	/// Proof Skipped: Server ServerById (max_values: None, max_size: None, mode: Measured)
	/// Storage: Server Tasks (r:1 w:1)
	/// Proof Skipped: Server Tasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Server ServerByOwner (r:0 w:1)
	/// Proof Skipped: Server ServerByOwner (max_values: None, max_size: None, mode: Measured)
	fn cancel_unregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `367`
		//  Estimated: `8031`
		// Minimum execution time: 71_000 nanoseconds.
		Weight::from_parts(149_000_000, 8031)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn on_initialize_server() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 0 nanoseconds.
		Weight::from_parts(1_000_000, 0)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Server ServerByApiUrl (r:1 w:1)
	/// Proof Skipped: Server ServerByApiUrl (max_values: None, max_size: None, mode: Measured)
	/// Storage: Server ServerCount (r:1 w:1)
	/// Proof Skipped: Server ServerCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Server ServerIndex (r:1 w:1)
	/// Proof Skipped: Server ServerIndex (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Server ServerById (r:0 w:1)
	/// Proof Skipped: Server ServerById (max_values: None, max_size: None, mode: Measured)
	/// Storage: Server ServerByOwner (r:0 w:1)
	/// Proof Skipped: Server ServerByOwner (max_values: None, max_size: None, mode: Measured)
	/// The range of component `s` is `[1, 100]`.
	fn register(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `80`
		//  Estimated: `10428`
		// Minimum execution time: 159_000 nanoseconds.
		Weight::from_parts(192_799_534, 10428)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: Server ServerById (r:1 w:1)
	/// Proof Skipped: Server ServerById (max_values: None, max_size: None, mode: Measured)
	/// Storage: Server ServerByOwner (r:2 w:2)
	/// Proof Skipped: Server ServerByOwner (max_values: None, max_size: None, mode: Measured)
	/// Storage: Server ServerByApiUrl (r:2 w:2)
	/// Proof Skipped: Server ServerByApiUrl (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 2]`.
	fn update_server(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `415`
		//  Estimated: `10826 + s * (3716 ±0)`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(114_297_237, 10826)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 3716).saturating_mul(s.into()))
	}
	/// Storage: Server ServerById (r:1 w:1)
	/// Proof Skipped: Server ServerById (max_values: None, max_size: None, mode: Measured)
	/// Storage: Server Tasks (r:1 w:1)
	/// Proof Skipped: Server Tasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Server ServerByOwner (r:0 w:1)
	/// Proof Skipped: Server ServerByOwner (max_values: None, max_size: None, mode: Measured)
	fn unregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `313`
		//  Estimated: `7869`
		// Minimum execution time: 70_000 nanoseconds.
		Weight::from_parts(74_000_000, 7869)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Server ServerById (r:1 w:1)
	/// Proof Skipped: Server ServerById (max_values: None, max_size: None, mode: Measured)
	/// Storage: Server Tasks (r:1 w:1)
	/// Proof Skipped: Server Tasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Server ServerByOwner (r:0 w:1)
	/// Proof Skipped: Server ServerByOwner (max_values: None, max_size: None, mode: Measured)
	fn cancel_unregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `367`
		//  Estimated: `8031`
		// Minimum execution time: 71_000 nanoseconds.
		Weight::from_parts(149_000_000, 8031)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn on_initialize_server() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 0 nanoseconds.
		Weight::from_parts(1_000_000, 0)
	}
}
